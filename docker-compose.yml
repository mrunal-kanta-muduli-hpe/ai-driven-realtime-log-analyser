# Smart Log Analyzer - Docker Compose Configuration
# Provides development and testing environment with supporting services

version: '3.8'

services:
  # Main Smart Log Analyzer service
  smart-log-analyzer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sla-main
    volumes:
      - ./samplelogs:/app/samplelogs:ro
      - ./data:/app/data
      - ./logs:/app/logs
      - ./configs:/app/configs
    environment:
      - SLA_LOG_LEVEL=INFO
      - SLA_CONFIG_PATH=/app/configs/config.yaml
    networks:
      - sla-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Development service with live reload
  smart-log-analyzer-dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sla-dev
    volumes:
      - .:/app
    environment:
      - SLA_LOG_LEVEL=DEBUG
      - SLA_CONFIG_PATH=/app/configs/config.yaml
      - PYTHONPATH=/app/src
    networks:
      - sla-network
    depends_on:
      - postgres
      - redis
    command: python src/main.py --help
    profiles:
      - dev

  # PostgreSQL for storing analysis results and models
  postgres:
    image: postgres:15-alpine
    container_name: sla-postgres
    environment:
      POSTGRES_DB: smart_log_analyzer
      POSTGRES_USER: sla_user
      POSTGRES_PASSWORD: sla_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - sla-network
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: sla-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - sla-network
    restart: unless-stopped

  # Web dashboard (future feature)
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sla-dashboard
    volumes:
      - ./data:/app/data:ro
      - ./configs:/app/configs:ro
    environment:
      - SLA_MODE=dashboard
      - SLA_CONFIG_PATH=/app/configs/config.yaml
    ports:
      - "8080:8080"
    networks:
      - sla-network
    depends_on:
      - postgres
      - redis
    command: python -m src.dashboard.app
    profiles:
      - dashboard
    restart: unless-stopped

  # Jupyter notebook for data exploration
  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: sla-jupyter
    volumes:
      - .:/home/jovyan/work
      - ./notebooks:/home/jovyan/notebooks
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - sla-network
    profiles:
      - analysis
    restart: unless-stopped

  # Log file watcher for real-time processing
  log-watcher:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sla-watcher
    volumes:
      - ./samplelogs:/app/samplelogs:ro
      - ./data:/app/data
      - ./logs:/app/logs
      - ./configs:/app/configs
    environment:
      - SLA_MODE=watcher
      - SLA_CONFIG_PATH=/app/configs/config.yaml
    networks:
      - sla-network
    depends_on:
      - smart-log-analyzer
      - postgres
      - redis
    command: python -m src.watcher.log_watcher
    profiles:
      - realtime
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sla-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - sla-network
    profiles:
      - monitoring
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sla-grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - sla-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sla-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
